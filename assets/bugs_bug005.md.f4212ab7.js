import{_ as s,o as n,c as a,V as o}from"./chunks/framework.a215caf7.js";const d=JSON.parse('{"title":"Long 转 Json 精度缺失","description":"","frontmatter":{},"headers":[],"relativePath":"bugs/bug005.md","filePath":"bugs/bug005.md","lastUpdated":1689440421000}'),l={name:"bugs/bug005.md"},p=o(`<h1 id="long-转-json-精度缺失" tabindex="-1">Long 转 Json 精度缺失 <a class="header-anchor" href="#long-转-json-精度缺失" aria-label="Permalink to &quot;Long 转 Json 精度缺失&quot;">​</a></h1><h2 id="_1-错误信息" tabindex="-1">1.错误信息 <a class="header-anchor" href="#_1-错误信息" aria-label="Permalink to &quot;1.错误信息&quot;">​</a></h2><ul><li>现象: 后台是 Long 类型时, 前端只能保留 17 位, 后两位用 00 补充</li></ul><h2 id="_2-错误原因" tabindex="-1">2.错误原因 <a class="header-anchor" href="#_2-错误原因" aria-label="Permalink to &quot;2.错误原因&quot;">​</a></h2><p>Java 中的 Long 能表示的范围比 js 中 number 大, 通过 json 传递给前端 js 解析时, 会出现精度损失</p><h2 id="_3-解决方案" tabindex="-1">3.解决方案 <a class="header-anchor" href="#_3-解决方案" aria-label="Permalink to &quot;3.解决方案&quot;">​</a></h2><ul><li>局部配置: 在对应的属性上加如下注解, 将 Long 类型数据在封装为 json 时转换为 string 类型, <span style="color:red;">被转换字段必须为<strong>包装类型</strong></span></li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">JsonSerialize</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">using</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ToStringSerializer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">)</span></span></code></pre></div><ul><li><s>全局配置: 在配置文件中, 配置如下参数, 缺点是颗粒度太大，所有的数字都被转成字符串输出</s>(<em>测试无效</em>)</li></ul><div class="language-properties"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 配置序列化是将所有数值类型的数据转换为字符类型</span></span>
<span class="line"><span style="color:#C678DD;">spring.jackson.generator.write-numbers-as-strings</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">true</span></span></code></pre></div><ul><li><s>ObjectMapper: 自定义 ObjectMapperConfig 只对 long/Long 类型进行转换</s>(<em>测试无效</em>)</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">com.fasterxml.jackson.databind.ser.std.ToStringSerializer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">org.springframework.context.annotation.Bean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">org.springframework.context.annotation.Configuration</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@author</span><span style="color:#7F848E;font-style:italic;"> : kevin</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@version</span><span style="color:#7F848E;font-style:italic;"> 1.0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @date : 2022/8/9上午9:55</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @className : LongToStringConfig</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @description : TODO: Long/long 类型 json 序列化转 String, 防止 Long 数据长度过长, 前端精度损失</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">LongToStringConfig</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> @</span><span style="color:#E5C07B;">Bean</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">Jackson2ObjectMapperBuilderCustomizer</span><span style="color:#61AFEF;"> jsonObjectMapper</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> jsonObjectMapper </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> jsonObjectMapper</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">serializerByType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ToStringSerializer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">serializerByType</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TYPE</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ToStringSerializer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">Ps:</p><p>不要在 Result 工具类中使用其他(如: fastjson) json 工具类处理 data 数据, 否则在 SpringBoot 返回数据时, 不会再处理已经是 json 的数据, 统一让 SpringBoot 返回数据是去序列化为 json 数据</p></div>`,13),e=[p];function t(r,c,i,B,y,g){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{d as __pageData,u as default};
