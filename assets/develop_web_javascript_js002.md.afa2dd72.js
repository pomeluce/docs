import{_ as s,o as a,c as l,V as n}from"./chunks/framework.a215caf7.js";const u=JSON.parse('{"title":"Js中三元运算的简写","description":"","frontmatter":{},"headers":[],"relativePath":"develop/web/javascript/js002.md","filePath":"develop/web/javascript/js002.md","lastUpdated":1689440421000}'),o={name:"develop/web/javascript/js002.md"},e=n(`<h1 id="js中三元运算的简写" tabindex="-1">Js中三元运算的简写 <a class="header-anchor" href="#js中三元运算的简写" aria-label="Permalink to &quot;Js中三元运算的简写&quot;">​</a></h1><h2 id="_1-用法" tabindex="-1">1.|| 用法 <a class="header-anchor" href="#_1-用法" aria-label="Permalink to &quot;1.|| 用法&quot;">​</a></h2><ol><li>语法:</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">原</span><span style="color:#ABB2BF;">: </span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">var1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">var1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">var2</span></span>
<span class="line"><span style="color:#E06C75;">简</span><span style="color:#ABB2BF;">: </span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">var1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">var</span><span style="color:#ABB2BF;">;</span></span></code></pre></div><ol start="2"><li>分析:</li></ol><ul><li>逻辑运算符通常用于布尔型值, 它们返回一个布尔值. 然而, 在 javascript 中, &amp;&amp; 和 || 运算符会返回一个指定操作数的值, 因此, 这些运算符也用于非布尔值. 这时, 它们也就会返回一个非布尔型值</li><li>expr1 || expr2 若 expr1 可转换为 true, 则返回 expr1, 否则, 返回 expr2</li><li>会被转换为 false 的表达式有: null, NaN, 0, 空字符串(&quot;&quot; or &#39;&#39; or \`\`), undefinedfined</li></ul>`,6),p=[e];function t(r,c,B,i,d,y){return a(),l("div",null,p)}const C=s(o,[["render",t]]);export{u as __pageData,C as default};
