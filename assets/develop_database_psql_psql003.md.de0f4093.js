import{_ as t,o as a,c as e,V as d}from"./chunks/framework.a215caf7.js";const y=JSON.parse('{"title":"PostgreSQL 数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"develop/database/psql/psql003.md","filePath":"develop/database/psql/psql003.md","lastUpdated":1698766194000}'),o={name:"develop/database/psql/psql003.md"},l=d(`<h1 id="postgresql-数据类型" tabindex="-1">PostgreSQL 数据类型 <a class="header-anchor" href="#postgresql-数据类型" aria-label="Permalink to &quot;PostgreSQL 数据类型&quot;">​</a></h1><h2 id="_1-数字类型" tabindex="-1">1. 数字类型 <a class="header-anchor" href="#_1-数字类型" aria-label="Permalink to &quot;1. 数字类型&quot;">​</a></h2><p>数字类型由 2、4 或 8 字节的整数以及 4 或 8 字节的浮点数和可选精度小数组成, <a href="#numbertype">下表</a>列出了所有可用类型。</p><p><strong><span id="numbertype">数字类型</span>:</strong></p><table><thead><tr><th>名字</th><th>存储尺寸</th><th>描述</th><th>范围</th></tr></thead><tbody><tr><td><code>smallint</code></td><td>2字节</td><td>小范围整数</td><td>-32768 ~ +32767</td></tr><tr><td><code>integer</code></td><td>4字节</td><td>整数的典型选择</td><td>-2147483648 ~ +2147483647</td></tr><tr><td><code>bigint</code></td><td>8字节</td><td>大范围整数</td><td>-9223372036854775808 ~ +9223372036854775807</td></tr><tr><td><code>decimal</code></td><td>可变</td><td>用户指定精度, 精确</td><td>最高小数点前 131072 位, 以及小数点后 16383 位</td></tr><tr><td><code>numeric</code></td><td>可变</td><td>用户指定精度, 精确</td><td>最高小数点前 131072 位, 以及小数点后 16383 位</td></tr><tr><td><code>real</code></td><td>4字节</td><td>可变精度, 不精确</td><td>6 位十进制精度</td></tr><tr><td><code>double precision</code></td><td>8字节</td><td>可变精度, 不精确</td><td>15 位十进制精度</td></tr><tr><td><code>smallserial</code></td><td>2字节</td><td>自动增加的小整数</td><td>1 ~ 32767</td></tr><tr><td><code>serial</code></td><td>4字节</td><td>自动增加的整数</td><td>1 ~ 2147483647</td></tr><tr><td><code>bigserial</code></td><td>8字节</td><td>自动增长的大整数</td><td>1 ~ 9223372036854775807</td></tr></tbody></table><h2 id="_2-货币类型" tabindex="-1">2. 货币类型 <a class="header-anchor" href="#_2-货币类型" aria-label="Permalink to &quot;2. 货币类型&quot;">​</a></h2><p>money 类型存储固定小数精度的货币数字, 小数的精度由数据库的<a href="http://www.postgres.cn/docs/13/runtime-config-client.html#GUC-LC-MONETARY" target="_blank" rel="noreferrer">lc_monetary</a>设置决定</p><p>numeric、int 和 bigint 类型的值可以转换为 money, 不建议使用浮点数来处理处理货币类型, 因为存在舍入错误的可能性</p><table><thead><tr><th>名字</th><th>存储尺寸</th><th>描述</th><th>范围</th></tr></thead><tbody><tr><td><code>money</code></td><td>8 bytes</td><td>货币额</td><td>-92233720368547758.08到+92233720368547758.07</td></tr></tbody></table><h2 id="_3-字符类型" tabindex="-1">3. 字符类型 <a class="header-anchor" href="#_3-字符类型" aria-label="Permalink to &quot;3. 字符类型&quot;">​</a></h2><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>character varying(<em>n</em>), varchar(<em>n</em>)</td><td>有限制的变长</td></tr><tr><td>character(<em>n</em>), char(<em>n</em>)</td><td>定长, 空格填充</td></tr><tr><td>text</td><td>无限变长</td></tr></tbody></table><h2 id="_4-二进制数据类型" tabindex="-1">4. 二进制数据类型 <a class="header-anchor" href="#_4-二进制数据类型" aria-label="Permalink to &quot;4. 二进制数据类型&quot;">​</a></h2><table><thead><tr><th>名字</th><th>存储尺寸</th><th>描述</th></tr></thead><tbody><tr><td><code>bytea</code></td><td>1 或 4 字节外加真正的二进制串</td><td>变长二进制串</td></tr></tbody></table><h2 id="_5-日期-时间类型" tabindex="-1">5. 日期/时间类型 <a class="header-anchor" href="#_5-日期-时间类型" aria-label="Permalink to &quot;5. 日期/时间类型&quot;">​</a></h2><table><thead><tr><th>名字</th><th>存储尺寸</th><th>描述</th><th>最小值</th><th>最大值</th><th>解析度</th></tr></thead><tbody><tr><td>timestamp [ (<em>p</em>) ] [ without time zone ]</td><td>8字节</td><td>包括日期和时间（无时区）</td><td>4713 BC</td><td>294276 AD</td><td>1微秒</td></tr><tr><td>timestamp [ (<em>p</em>) ] with time zone</td><td>8字节</td><td>包括日期和时间，有时区</td><td>4713 BC</td><td>294276 AD</td><td>1微秒</td></tr><tr><td>date</td><td>4字节</td><td>日期（没有一天中的时间）</td><td>4713 BC</td><td>5874897 AD</td><td>1日</td></tr><tr><td>time [ (<em>p</em>) ] [ without time zone ]</td><td>8字节</td><td>一天中的时间（无日期）</td><td>00:00:00</td><td>24:00:00</td><td>1微秒</td></tr><tr><td>time [ (<em>p</em>) ] with time zone</td><td>12字节</td><td>仅仅是一天中的时间（没有日期），带有时区</td><td>00:00:00+1459</td><td>24:00:00-1459</td><td>1微秒</td></tr><tr><td>interval [ <em>fields</em> ] [ (<em>p</em>) ]</td><td>16字节</td><td>时间间隔</td><td>-178000000年</td><td>178000000年</td><td>1微秒</td></tr></tbody></table><h2 id="_6-布尔类型" tabindex="-1">6. 布尔类型 <a class="header-anchor" href="#_6-布尔类型" aria-label="Permalink to &quot;6. 布尔类型&quot;">​</a></h2><p>PostgreSQL 支持标准的 boolean 数据类型。</p><p>boolean 有 &quot;true&quot; (真) 或 &quot;false&quot; (假) 两个状态, 第三种 &quot;unknown&quot; (未知)状态, 用 NULL 表示</p><table><thead><tr><th>名字</th><th>存储字节</th><th>描述</th></tr></thead><tbody><tr><td><code>boolean</code></td><td>1字节</td><td>状态为真或假</td></tr></tbody></table><ul><li>输入函数接受这些字符串表示&quot;真&quot;状态: true yes 1 on</li><li>输入函数接受这些字符串表示&quot;假&quot;状态: false no 0 off</li></ul><p><span style="background:yellow;color:balck;">这些字符串的唯一前缀也可以接受, 例如 t 或 n, 前端或尾部的空格将被忽略, 并且大小写不敏感</span></p><h2 id="_7-枚举类型" tabindex="-1">7. 枚举类型 <a class="header-anchor" href="#_7-枚举类型" aria-label="Permalink to &quot;7. 枚举类型&quot;">​</a></h2><p>枚举(enum)类型是由一个静态、值的有序集合构成的数据类型, 它们等效于很多编程语言所支持的 enum 类型</p><ul><li>声明方式</li></ul><p>枚举类型的声明通过 create type 命令创建</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mood</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> enum (</span><span style="color:#98C379;">&#39;sad&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;ok&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;happy&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><ul><li><p>排序: 一个枚举类型的值的排序是该类型被创建时所列出的值的顺序</p></li><li><p>类型安全性: 每一种枚举数据类型都是独立的并且不能和其他枚举类型相比较</p></li><li><p>实现细节: 枚举标签是大小写敏感的, 因此 &#39;happy&#39; 与 &#39;HAPPY&#39; 是不同的, 标签中的空格也是有意义的</p></li></ul><h2 id="_8-几何类型" tabindex="-1">8. 几何类型 <a class="header-anchor" href="#_8-几何类型" aria-label="Permalink to &quot;8. 几何类型&quot;">​</a></h2><p>几何数据类型表示二维的空间物体</p><table><thead><tr><th>名字</th><th>存储尺寸</th><th>表示</th><th>描述</th></tr></thead><tbody><tr><td><code>point</code></td><td>16字节</td><td>平面上的点</td><td>(x,y)</td></tr><tr><td><code>line</code></td><td>32字节</td><td>无限长的线</td><td>{A,B,C}</td></tr><tr><td><code>lseg</code></td><td>32字节</td><td>有限线段</td><td>((x1,y1),(x2,y2))</td></tr><tr><td><code>box</code></td><td>32字节</td><td>矩形框</td><td>((x1,y1),(x2,y2))</td></tr><tr><td><code>path</code></td><td>16+16n字节</td><td>封闭路径（类似于多边形）</td><td>((x1,y1),...)</td></tr><tr><td><code>path</code></td><td>16+16n字节</td><td>开放路径</td><td>[(x1,y1),...]</td></tr><tr><td><code>polygon</code></td><td>40+16n字节</td><td>多边形（类似于封闭路径）</td><td>((x1,y1),...)</td></tr><tr><td><code>circle</code></td><td>24字节</td><td>圆</td><td>&lt;(x,y),r&gt;（中心点和半径）</td></tr></tbody></table><h2 id="_9-网络地址类型" tabindex="-1">9. 网络地址类型 <a class="header-anchor" href="#_9-网络地址类型" aria-label="Permalink to &quot;9. 网络地址类型&quot;">​</a></h2><p>PostgreSQL 提供用于存储 IPv4、IPv6 和 MAC 地址的数据类型, 用这些数据类型存储网络地址比用纯文本类型好, 因为这些类型提供输入错误检查以及特殊的操作符和函数</p><table><thead><tr><th>名字</th><th>存储尺寸</th><th>描述</th></tr></thead><tbody><tr><td><code>cidr</code></td><td>7或19字节</td><td>IPv4和IPv6网络</td></tr><tr><td><code>inet</code></td><td>7或19字节</td><td>IPv4和IPv6主机以及网络</td></tr><tr><td><code>macaddr</code></td><td>6字节</td><td>MAC地址</td></tr><tr><td><code>macaddr8</code></td><td>8 bytes</td><td>MAC地址（EUI-64格式）</td></tr></tbody></table><p>在对 inet 或者 cidr 数据类型进行排序的时候, IPv4 地址将总是排在 IPv6 地址前面, 包括那些封装或者是映射在 IPv6 地址里的 IPv4 地址, 例如 ::10.2.3.4 或者 ::ffff::10.4.3.2</p><h2 id="_10-位串类型" tabindex="-1">10. 位串类型 <a class="header-anchor" href="#_10-位串类型" aria-label="Permalink to &quot;10. 位串类型&quot;">​</a></h2><ul><li><p>位串就是一串 1 和 0 的串, 它们可以用于存储和可视化位掩码, 我们有两种类型的 SQL 位类型: bit(<em>n</em>) 和 bit varying(<em>n</em>), 其中 <em>n</em> 是一个正整数</p></li><li><p>bit 类型的数据必须准确匹配长度 <em>n</em>, 试图存储短些或者长一些的位串都是错误的, <code>bit varying</code> 数据是最长 <em><code>n</code></em> 的变长类型, 更长的串会被拒绝</p></li><li><p>写一个没有长度的 <code>bit</code> 等效于 bit(1), 没有长度的 <code>bit varying</code> 意味着没有长度限制</p></li></ul><h2 id="_11-文本搜索类型" tabindex="-1">11. 文本搜索类型 <a class="header-anchor" href="#_11-文本搜索类型" aria-label="Permalink to &quot;11. 文本搜索类型&quot;">​</a></h2><ul><li>全文搜索是一种在自然语言的<em>文档</em>集合中搜索以定位那些最匹配一个<em>查询</em>的文档的活动</li><li>PostgreSQL 提供两种数据类型, 它们被设计用来支持全文搜索</li></ul><table><thead><tr><th>名字</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td><strong>tsvector</strong></td><td style="text-align:left;">tsvector 的值是一个无重复值的 lexemes 排序列表, 即一些同一个词的不同变种的标准化</td></tr><tr><td><strong>tsquery</strong></td><td style="text-align:left;">tsquery 存储用于检索的词汇, 并且使用布尔操作符 &amp;(AND), |(OR)和!(NOT) 来组合它们, 括号用来强调操作符的分组。</td></tr></tbody></table><h2 id="_12-uuid-类型" tabindex="-1">12. UUID 类型 <a class="header-anchor" href="#_12-uuid-类型" aria-label="Permalink to &quot;12. UUID 类型&quot;">​</a></h2><ul><li><p>数据类型 uuid 存储由 RFC 4122、ISO/IEC 9834-8:2005 以及相关标准定义的通用唯一标识符（UUID）（某些系统将这种数据类型引用为全局唯一标识符GUID）; 这种标识符是一个128位的量, 它由一个精心选择的算法产生, 该算法能保证在已知空间中任何其他使用相同算法的人能够产生同一个标识符的可能性非常非常小; 因此, 对于分布式系统, 这些标识符相比序列生成器而言提供了一种很好的唯一性保障, 序列生成器只能在一个数据库中保证唯一</p></li><li><p>一个 UUID 被写成一个小写十六进制位的序列, 该序列被连字符分隔成多个组: 首先是一个8位组, 接下来是三个4位组, 最后是一个12位组; 总共的32位（十六进制位）表示了128个二进制位; 一个标准形式的UUID类似于:</p></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11</span></span></code></pre></div><ul><li>PostgreSQL也接受另一种输入形式: 使用大写位、标准格式被花括号包围、忽略某些或者全部连字符、在任意4位组后面增加一个连字符</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11</span></span>
<span class="line"><span style="color:#abb2bf;">{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11}</span></span>
<span class="line"><span style="color:#abb2bf;">a0eebc999c0b4ef8bb6d6bb9bd380a11</span></span>
<span class="line"><span style="color:#abb2bf;">a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11</span></span>
<span class="line"><span style="color:#abb2bf;">{a0eebc99-9c0b4ef8-bb6d6bb9-bd380a11}</span></span></code></pre></div><ul><li>输出总是采用标准形式</li></ul><h2 id="_13-xml-类型" tabindex="-1">13. XML 类型 <a class="header-anchor" href="#_13-xml-类型" aria-label="Permalink to &quot;13. XML 类型&quot;">​</a></h2><ul><li><p><code>xml</code> 数据类型可以被用来存储 XML 数据; 它比直接在一个 <code>text</code> 域中存储 XML 数据的优势在于, 它会检查输入值的结构是不是良好, 并且有支持函数用于在其上执行类型安全的操作, 使用这种数据类型要求在安装时用 <code>configure --with-libxml</code> 选项编译</p></li><li><p><code>xml</code> 类型可以存储格式良好的遵循 XML 标准定义的&quot;文档&quot;, 以及&quot;内容&quot;片段, 它是通过引用更宽泛的<a href="https://www.w3.org/TR/2010/REC-xpath-datamodel-20101214/#DocumentNode" target="_blank" rel="noreferrer">&quot;document node&quot;</a> XQuery 和 XPath 数据模型来定义的</p></li><li><p>大致上说, 这意味着内容片段中可以有多于一个的顶层元素或字符节点</p></li><li><p>表达式 <em>xmlvalue</em> IS DOCUMENT 可以被用来评估一个特定的 <code>xml</code> 值是一个完整文档或者仅仅是一个文档片段</p></li><li><p>创建方式: xmlparse ( { document | content } value)</p></li></ul><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">xmlparse (document </span><span style="color:#98C379;">&#39;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;book&gt;&lt;title&gt;Manual&lt;/title&gt;&lt;chapter&gt;...&lt;/chapter&gt;&lt;/book&gt;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">xmlparse (content </span><span style="color:#98C379;">&#39;abc&lt;foo&gt;bar&lt;/foo&gt;&lt;bar&gt;foo&lt;/bar&gt;&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre></div><h2 id="_14-json-类型" tabindex="-1">14. JSON 类型 <a class="header-anchor" href="#_14-json-类型" aria-label="Permalink to &quot;14. JSON 类型&quot;">​</a></h2><p>JSON 数据类型是用来存储 JSON（JavaScript Object Notation）数据的; 这种数据也可以被存储为 <code>text</code>, 但是 JSON 数据类型的优势在于能强制要求每个被存储的值符合 JSON 规则; 也有很多 JSON 相关的函数和操作符可以用于存储在这些数据类型中的数据</p><ul><li>PostgreSQL 提供存储JSON数据的两种类型: <code>json</code> 和 <code>jsonb</code></li><li>区别:</li></ul><table><thead><tr><th></th><th>JSON</th><th>JSONB</th></tr></thead><tbody><tr><td>输入值</td><td>几乎完全相同的值集合</td><td>几乎完全相同的值集合</td></tr><tr><td>存储格式</td><td>文本形式, 保留空格和键的顺序</td><td>分解的二进制格式, 不保留空格和键的顺序</td></tr><tr><td>解析</td><td>每次执行时必须重新解析</td><td>不需要解析</td></tr><tr><td>转换</td><td>需要附加的转换</td><td>在输入时需要稍慢一些</td></tr><tr><td>索引</td><td>不支持索引</td><td>支持索引</td></tr><tr><td>键处理</td><td>保留所有键/值对，包括重复的键/值对</td><td>只保留最后一个键/值对</td></tr></tbody></table><ul><li>通常, 除非有特别特殊的需要（例如遗留的对象键顺序假设）, 大多数应用应该更愿意把 JSON 数据存储为 <code>jsonb</code></li></ul><h2 id="_15-数组类型" tabindex="-1">15. 数组类型 <a class="header-anchor" href="#_15-数组类型" aria-label="Permalink to &quot;15. 数组类型&quot;">​</a></h2><ul><li>PostgreSQL 允许一个表中的列定义为变长多维数组; 可以创建任何内建或用户定义的基类、枚举类型、组合类型或者域的数组</li></ul><p><strong>数组类型定义</strong>: 在创建表时, 可以这样子声明数组</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">table</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sal_emp</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">name</span><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">text</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    pay_by_quarter  </span><span style="color:#C678DD;">integer</span><span style="color:#E06C75;">[]</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    schedule        </span><span style="color:#C678DD;">text</span><span style="color:#E06C75;">[][]</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre></div><p>pay_by_quarter 为一维整型数组、schedule 为二维文本类型数组, 我们也可以使用 &quot;ARRAY&quot; 关键字, 如下所示:</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">create</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">table</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sal_emp</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">text</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">   pay_by_quarter </span><span style="color:#C678DD;">integer</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">ARRAY</span><span style="color:#E06C75;">[4]</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">   schedule </span><span style="color:#C678DD;">text</span><span style="color:#E06C75;">[][]</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre></div><h2 id="_16-组合类型" tabindex="-1">16. 组合类型 <a class="header-anchor" href="#_16-组合类型" aria-label="Permalink to &quot;16. 组合类型&quot;">​</a></h2><h2 id="_17-范围类型" tabindex="-1">17. 范围类型 <a class="header-anchor" href="#_17-范围类型" aria-label="Permalink to &quot;17. 范围类型&quot;">​</a></h2><h2 id="_18-域类型" tabindex="-1">18. 域类型 <a class="header-anchor" href="#_18-域类型" aria-label="Permalink to &quot;18. 域类型&quot;">​</a></h2><h2 id="_19-对象标识符类型" tabindex="-1">19. 对象标识符类型 <a class="header-anchor" href="#_19-对象标识符类型" aria-label="Permalink to &quot;19. 对象标识符类型&quot;">​</a></h2><h2 id="_20-索引" tabindex="-1">20. 索引 <a class="header-anchor" href="#_20-索引" aria-label="Permalink to &quot;20. 索引&quot;">​</a></h2><h2 id="_21-伪类型" tabindex="-1">21. 伪类型 <a class="header-anchor" href="#_21-伪类型" aria-label="Permalink to &quot;21. 伪类型&quot;">​</a></h2>`,65),s=[l];function n(r,p,c,i,h,b){return a(),e("div",null,s)}const m=t(o,[["render",n]]);export{y as __pageData,m as default};
