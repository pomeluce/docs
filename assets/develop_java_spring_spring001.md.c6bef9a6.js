import{_ as t,o as e,c as a,V as l}from"./chunks/framework.a215caf7.js";const g=JSON.parse('{"title":"Restful 接口规范","description":"","frontmatter":{},"headers":[],"relativePath":"develop/java/spring/spring001.md","filePath":"develop/java/spring/spring001.md","lastUpdated":1689440421000}'),r={name:"develop/java/spring/spring001.md"},o=l('<h1 id="restful-接口规范" tabindex="-1">Restful 接口规范 <a class="header-anchor" href="#restful-接口规范" aria-label="Permalink to &quot;Restful 接口规范&quot;">​</a></h1><h2 id="_1-url-接口语法" tabindex="-1">1.url 接口语法 <a class="header-anchor" href="#_1-url-接口语法" aria-label="Permalink to &quot;1.url 接口语法&quot;">​</a></h2><p>url通用接口如下: <code>URI = scheme&quot;://&quot;host:port&quot;/&quot;path[&quot;?&quot;query][&quot;#&quot;fragment]</code></p><ul><li>scheme: 指底层用的协议，如http、https、ftp</li><li>host: 服务器的IP地址或者域名</li><li>port: 端口，http中默认80</li><li>path: 访问资源的路径，就是咱们各种web 框架中定义的route路由</li><li>query: 为发送给服务器的参数</li><li>fragment: 锚点，定位到页面的资源，锚点为资源id</li></ul><h2 id="_2-api-设计" tabindex="-1">2.api 设计 <a class="header-anchor" href="#_2-api-设计" aria-label="Permalink to &quot;2.api 设计&quot;">​</a></h2><h3 id="_1-url-的定义" tabindex="-1">1.url 的定义 <a class="header-anchor" href="#_1-url-的定义" aria-label="Permalink to &quot;1.url 的定义&quot;">​</a></h3><ul><li>URL 中不能有动词</li><li>URL 结尾不应该包含斜杠 &quot;/&quot;</li><li>正斜杠分隔符 &quot;/&quot; 必须用来指示层级关系</li><li>应该使用连字符 &quot;-&quot; 来提高 URL 的可读性, 而不是使用下划线 &quot;_&quot;</li><li>URL 路径中首选小写字母</li><li>URL 路径名词均为复数</li></ul><h3 id="_2-api对资源的操作" tabindex="-1">2.api对资源的操作 <a class="header-anchor" href="#_2-api对资源的操作" aria-label="Permalink to &quot;2.api对资源的操作&quot;">​</a></h3><ul><li><p><strong>CRUD 操作</strong></p><table><thead><tr><th>操作</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td>GET</td><td style="text-align:center;">获取资源</td></tr><tr><td>POST</td><td style="text-align:center;">新建资源</td></tr><tr><td>PUT</td><td style="text-align:center;">在服务器更新资源（向客户端提供改变后的所有资源）</td></tr><tr><td>PATCH</td><td style="text-align:center;">在服务器更新资源（向客户端提供改变的属性）</td></tr><tr><td>DELETE</td><td style="text-align:center;">删除资源</td></tr></tbody></table></li><li><p><strong>资源过滤, 在获取资源的时候，有可能需要获取某些“过滤”后的资源，例如指定前10行数据</strong></p></li></ul><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">http://api.user.com/schools/grades/classes/boys?page=1&amp;page-size=10</span></span></code></pre></div><ul><li><p><strong>返回状态码(推荐标准HTTP状态码)</strong></p><p>有很多服务器将返回状态码一直设为 200, 然后在返回 body 里面自定义一些状态码来表示服务器返回结果的状态码, 由于 rest api 是直接使用的 HTTP 协议, 所以它的状态码也要尽量使用HTTP协议的状态码</p></li><li><p><strong>返回结果</strong></p><table><thead><tr><th>操作</th><th>结果</th></tr></thead><tbody><tr><td>GET/collections</td><td>返回资源列表</td></tr><tr><td>GET/collections/:id</td><td>返回单独的资源</td></tr><tr><td>POST/collections</td><td>返回新生成的资源对象</td></tr><tr><td>PUT/collections/:id</td><td>返回完整的资源对象</td></tr><tr><td>PATCH/collections/:id</td><td>返回被修改的属性</td></tr><tr><td>DELETE/collections/:id</td><td>返回一个空文档</td></tr></tbody></table></li></ul>',11),i=[o];function d(s,n,p,c,u,h){return e(),a("div",null,i)}const q=t(r,[["render",d]]);export{g as __pageData,q as default};
